<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Travis的小木屋</title>
  
  <subtitle>一个以技术为导向的个人博客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-24T17:29:39.817Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Travis FU</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode刷题 4/25</title>
    <link href="http://example.com/2022/04/25/Leetcode%E5%88%B7%E9%A2%98-4-25/"/>
    <id>http://example.com/2022/04/25/Leetcode%E5%88%B7%E9%A2%98-4-25/</id>
    <published>2022-04-24T17:26:24.000Z</published>
    <updated>2022-04-24T17:29:39.817Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id><a href="#" class="headerlink" title="#"></a>#</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Computer Science" scheme="http://example.com/categories/Computer-Science/"/>
    
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>栀子花开了！</title>
    <link href="http://example.com/2022/04/21/%E6%A0%80%E5%AD%90%E8%8A%B1%E5%BC%80%E4%BA%86/"/>
    <id>http://example.com/2022/04/21/%E6%A0%80%E5%AD%90%E8%8A%B1%E5%BC%80%E4%BA%86/</id>
    <published>2022-04-21T13:11:32.000Z</published>
    <updated>2022-04-21T13:25:16.950Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>返校的时候买了一小盆栀子花，一直放在书架上。<br>不过是早晨给它挪个位置晒晒阳光，晚上关窗帘的时候拿进来。<br>今天早上再次看到它的时候，其中一个花苞已经开了，凑近一闻，真是香！<br><img src="/2022/04/21/%E6%A0%80%E5%AD%90%E8%8A%B1%E5%BC%80%E4%BA%86/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220421212236.jpg" class title="栀子花开"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="木屋杂谈" scheme="http://example.com/categories/%E6%9C%A8%E5%B1%8B%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="闲聊" scheme="http://example.com/tags/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
  <entry>
    <title>2022.4.19小记</title>
    <link href="http://example.com/2022/04/19/2022-4-19%E5%B0%8F%E8%AE%B0/"/>
    <id>http://example.com/2022/04/19/2022-4-19%E5%B0%8F%E8%AE%B0/</id>
    <published>2022-04-19T10:30:06.000Z</published>
    <updated>2022-04-19T10:40:44.570Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="最近在搞的一些事情"><a href="#最近在搞的一些事情" class="headerlink" title="最近在搞的一些事情"></a>最近在搞的一些事情</h2><p><em>射雕英雄传看到三百面左右了，不过得看快点了，5月6号ddl（瑟瑟发抖）</em>物理作业明天ddl，还要花点时间在物理上<br><em>天晴了把被子拿出去晒一下</em>入手了一个机械键盘，声音好听得雅痞/在图书馆里用估计得被人打<br><em>口腔溃疡了，烦内~</em>明天开始起床刷leetcode题！加油兄弟们！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="闲聊" scheme="http://example.com/tags/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
  <entry>
    <title>CSC第二次作业反思</title>
    <link href="http://example.com/2022/04/19/CSC%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A%E5%8F%8D%E6%80%9D/"/>
    <id>http://example.com/2022/04/19/CSC%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A%E5%8F%8D%E6%80%9D/</id>
    <published>2022-04-19T10:13:27.000Z</published>
    <updated>2022-04-19T10:27:12.699Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="今天可算是把计算机第二次大作业给整完了！"><a href="#今天可算是把计算机第二次大作业给整完了！" class="headerlink" title="今天可算是把计算机第二次大作业给整完了！"></a>今天可算是把计算机第二次大作业给整完了！</h2><p>经过了四天的艰苦卓绝的、自强不息的奋斗，计算机flipping color可以说是告一段落了。<br>在这里分享一点个人心得：<br>1.画布的位置、方块的尺寸一定要事先设置好（至少我的方法是这样）<br>2.颜色可以不局限于简单的红黄蓝绿，试试其他颜色代码吧！<br>3.最精髓的应该是利用递归算法找相邻且颜色相同的色块了吧<br>4.回想起来这几天真的好肝，睡觉很容易醒T_T<br>5.也可以适当写一些标语<br>6.想贴出源代码，但考虑到ddl还没到（滑稽）就不发了~<br>接下来要把精力投入到物理了~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Computer Science" scheme="http://example.com/categories/Computer-Science/"/>
    
    
    <category term="Assignments" scheme="http://example.com/tags/Assignments/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题2022/4/14</title>
    <link href="http://example.com/2022/04/14/LeetCode%E5%88%B7%E9%A2%982022-4-14/"/>
    <id>http://example.com/2022/04/14/LeetCode%E5%88%B7%E9%A2%982022-4-14/</id>
    <published>2022-04-14T03:31:05.000Z</published>
    <updated>2022-08-19T18:22:23.436Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="2-两数相加-中等"><a href="#2-两数相加-中等" class="headerlink" title="2.两数相加/中等"></a>2.两数相加/中等</h1><p>给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0  开头。</p><h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>读完题之后首先想到链表的python实现，但这块内容平日里很少用到，于是上b站搜索了相关内容复习了一遍。首先，如果题目给出的是列表，那我还是会的，正向思维，实现如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">addTwoNumber</span>(<span class="params">l1,l2</span>):</span><br><span class="line">    <span class="built_in">list</span> = []</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(l1) &lt; <span class="built_in">len</span>(l2): <span class="comment"># 列表长度较小的那个用0填充</span></span><br><span class="line">        l1.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(l2) &lt; <span class="built_in">len</span>(l1):</span><br><span class="line">        l2.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(l1) == <span class="built_in">len</span>(l2): <span class="comment"># 如果长度相同，将两列表中的数字逆序变成字符串，再转化为int型</span></span><br><span class="line">        a = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> l1[::-<span class="number">1</span>])</span><br><span class="line">        b = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> l2[::-<span class="number">1</span>])</span><br><span class="line">        c = <span class="built_in">int</span>(a) + <span class="built_in">int</span>(b)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">str</span>(c):</span><br><span class="line">            <span class="built_in">list</span>.append(<span class="built_in">int</span>(k))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>[::-<span class="number">1</span>]</span><br><span class="line">            </span><br><span class="line"><span class="built_in">print</span>(addTwoNumber([<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>]))</span><br></pre></td></tr></table></figure><br>但题目给出的数据类型是链表，如果这样做它会提示你len()函数 is not defined，于是自然想到要把链表转化成列表来做，实现方法如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addTwoNumbers</span>(<span class="params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:<span class="comment"># 注意这里l1 l2为链表类型</span></span><br><span class="line">        <span class="comment"># 链表转成列表:定义两个空列表，用链表方法添加到列表中</span></span><br><span class="line">        <span class="comment"># 对于链表我们知道，一个节点是由数据域与指针域组成的</span></span><br><span class="line">        <span class="comment"># 单链表中尾指针的指针域指向None</span></span><br><span class="line">        a1=[]</span><br><span class="line">        a2=[]</span><br><span class="line">        <span class="keyword">while</span>(l1):</span><br><span class="line">            a1.append(l1.val) <span class="comment"># 添加值</span></span><br><span class="line">            l1=l1.<span class="built_in">next</span> <span class="comment"># 改变指针域</span></span><br><span class="line">        <span class="keyword">while</span>(l2):</span><br><span class="line">            a2.append(l2.val)</span><br><span class="line">            l2 = l2.<span class="built_in">next</span></span><br><span class="line">        <span class="comment">#剩下的操作和之前一致</span></span><br><span class="line">        <span class="comment">#列表转成字符串</span></span><br><span class="line">        a = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> a1)</span><br><span class="line">        b = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> a2)</span><br><span class="line">        <span class="comment">#字符串转成整数</span></span><br><span class="line">        <span class="comment">#整数之和转成字符串</span></span><br><span class="line">        m = <span class="built_in">str</span>(<span class="built_in">int</span>(a)+<span class="built_in">int</span>(b))</span><br><span class="line">        <span class="comment">### 新建两个空链表listnode(None)</span></span><br><span class="line">        tmp_node = ListNode(<span class="literal">None</span>)</span><br><span class="line">        node = ListNode(<span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 从后往前遍历和字符串，插入链表（列表转化为链表）</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> m[::-<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> tmp_node.val:</span><br><span class="line">                tmp_node.val=x</span><br><span class="line">                node = tmp_node</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp_node.<span class="built_in">next</span> = ListNode(x)</span><br><span class="line">                tmp_node = tmp_node.<span class="built_in">next</span></span><br><span class="line">                      </span><br><span class="line">        <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure><br>奇怪的是，这样子提交结果是错的。经过一波探索，问题应该出现在最后一步，列表转化成链表这块。于是我请教了一下列表转化成链表的正确姿势：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initList</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="comment"># 判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(data) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 创建头结点</span></span><br><span class="line">            self.head = ListNode(data[<span class="number">0</span>])</span><br><span class="line">            <span class="comment"># 头结点</span></span><br><span class="line">            r = self.head  </span><br><span class="line">            <span class="comment"># 指针 </span></span><br><span class="line">            p = self.head   </span><br><span class="line">            <span class="comment"># 逐个为 data 内的数据创建结点, 建立链表</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="number">1</span>:]:</span><br><span class="line">                node = ListNode(i)</span><br><span class="line">                p.<span class="built_in">next</span> = node</span><br><span class="line">                p = p.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><br>这里的data就是列表结构。</p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>刚刚看到csc作业2发布了T_T，滚去写作业了~</p><h1 id="4-20更新完整代码"><a href="#4-20更新完整代码" class="headerlink" title="4.20更新完整代码"></a>4.20更新完整代码</h1><p>之前一直纳闷为什么输出有误，经过一番指点，原来是有个地方缩进错了，完整代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addTwoNumbers</span>(<span class="params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:</span><br><span class="line">        <span class="comment">#链表转成列表</span></span><br><span class="line">        a1=[]</span><br><span class="line">        a2=[]</span><br><span class="line">        a3=[]</span><br><span class="line">        <span class="keyword">while</span>(l1):</span><br><span class="line">            a1.append(l1.val)</span><br><span class="line">            l1=l1.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span>(l2):</span><br><span class="line">            a2.append(l2.val)</span><br><span class="line">            l2=l2.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(a1) &lt; <span class="built_in">len</span>(a2):</span><br><span class="line">            a1.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(a1) &gt; <span class="built_in">len</span>(a2):</span><br><span class="line">            a2.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a1) == <span class="built_in">len</span>(a2):</span><br><span class="line">        <span class="comment">#列表转成字符串</span></span><br><span class="line">            a = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> a1[::-<span class="number">1</span>])</span><br><span class="line">            b = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> a2[::-<span class="number">1</span>])</span><br><span class="line">        <span class="comment">#整数之和转成字符串</span></span><br><span class="line">            m = <span class="built_in">str</span>(<span class="built_in">int</span>(a)+<span class="built_in">int</span>(b))</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> m:</span><br><span class="line">                a3.append(<span class="built_in">int</span>(k))</span><br><span class="line">            a3 = a3[::-<span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 创建头结点</span></span><br><span class="line">            self.head = ListNode(a3[<span class="number">0</span>])</span><br><span class="line">            <span class="comment"># 头结点</span></span><br><span class="line">            r = self.head  </span><br><span class="line">                <span class="comment"># 指针 </span></span><br><span class="line">            p = self.head   </span><br><span class="line">                <span class="comment"># 逐个为 data 内的数据创建结点, 建立链表</span></span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> a3[<span class="number">1</span>:]:</span><br><span class="line">                node = ListNode(n)</span><br><span class="line">                p.<span class="built_in">next</span> = node</span><br><span class="line">                p = p.<span class="built_in">next</span>       </span><br><span class="line">            <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><br>最后的结果：<br>执行用时：76 ms, 在所有 Python3 提交中击败了11.49%的用户<br>内存消耗：14.9 MB, 在所有 Python3 提交中击败了84.47%的用户<br>通过测试用例：1568 / 1568</p><h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>个人觉得由于我的方法中有较多的while循环，这样导致时间复杂度在n相同时更大，意味着耗时更长；<br>执行用时还是长了，秉着精益求精的理念，向大佬们讨教更优化的方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addTwoNumbers</span>(<span class="params">self, l1, l2</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type l1: ListNode</span></span><br><span class="line"><span class="string">        :type l2: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">if</span> l2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line"><span class="comment">## 空列表也是列表，当列表list为None时，list = None</span></span><br><span class="line">        tmp = ListNode(<span class="number">0</span>)</span><br><span class="line">        res = tmp</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">or</span> l2:</span><br><span class="line">            tmpsum = <span class="number">0</span> <span class="comment">##初始化逆序和</span></span><br><span class="line">            <span class="keyword">if</span> l1:</span><br><span class="line">                tmpsum = l1.val</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> l2:</span><br><span class="line">                tmpsum += l2.val</span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line">            tmpres = ((tmpsum + flag) % <span class="number">10</span>)</span><br><span class="line">            flag = ((tmpsum + flag) // <span class="number">10</span>)</span><br><span class="line">            res.<span class="built_in">next</span> = ListNode(tmpres)</span><br><span class="line">            res = res.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            res.<span class="built_in">next</span> = ListNode(<span class="number">1</span>)</span><br><span class="line">        res = tmp.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">del</span> tmp</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><br>相比之下，大佬的代码中只有一个while循环，自然执行时间就更短，牛！<br>提交结果：<br>执行用时：56 ms, 在所有 Python3 提交中击败了86.17%的用户<br>内存消耗：15 MB, 在所有 Python3 提交中击败了61.44%的用户<br>通过测试用例：1568 / 1568</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Computer Science" scheme="http://example.com/categories/Computer-Science/"/>
    
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题(2022/4/13)</title>
    <link href="http://example.com/2022/04/13/Leetcode%E5%88%B7%E9%A2%98/"/>
    <id>http://example.com/2022/04/13/Leetcode%E5%88%B7%E9%A2%98/</id>
    <published>2022-04-13T07:52:38.000Z</published>
    <updated>2022-04-20T07:06:22.623Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-两数之和-简单"><a href="#1-两数之和-简单" class="headerlink" title="1.两数之和/简单"></a>1.两数之和/简单</h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值target的那两个整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><h1 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h1><p>当时读完题之后的第一个想法是用两个for循环，找出列表两两之和，再与target比较，敲了一下，实现如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">nums, target</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[j] == target:</span><br><span class="line">                <span class="keyword">return</span> i,j</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"><span class="comment"># 测试用例</span></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">53</span>]</span><br><span class="line">target = <span class="number">39</span></span><br><span class="line"><span class="built_in">print</span>(twoSum(nums, target))</span><br></pre></td></tr></table></figure><br>但后来在提交的时候发现无法通过。由于我第一次在力扣上刷题还不清楚规矩，于是瞟了眼题解。</p><h1 id="解答a"><a href="#解答a" class="headerlink" title="解答a"></a>解答a</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">nums, target</span>):</span><br><span class="line">    lens = <span class="built_in">len</span>(nums)</span><br><span class="line">    j=-<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(lens):</span><br><span class="line">        <span class="keyword">if</span> (target - nums[i]) <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> (nums.count(target - nums[i]) == <span class="number">1</span>)&amp;(target - nums[i] == nums[i]):<span class="comment">#如果num2=num1,且nums中只出现了一次，说明找到是num1本身。</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j = nums.index(target - nums[i],i+<span class="number">1</span>) <span class="comment">#index(x,i+1)是从num1后的序列后找num2                </span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> j&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [i,j]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>不同之处在于，题解把两数之和问题转换了一下，变成去找target减去一个数，再判断这个结果是否在列表元素中；但实际上，他这种方法由于没有排除已经循环过的元素，在提交时会超出时间限制，故不再考虑。相比之下，我的解法就跳过了已经循环的元素</p><h1 id="解题记录"><a href="#解题记录" class="headerlink" title="解题记录"></a>解题记录</h1><p>最后通过网络冲浪才发现啊，我一开始写的代码叫伪代码。而leetcode在提交之前需要先初始化一个class，于是我把代码改成这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums:<span class="type">List</span>[<span class="built_in">int</span>], target:<span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] == target:</span><br><span class="line">                    <span class="keyword">return</span> [i,j]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><br>如此一来，便可以提交了。<br>最后的结果：<br>执行用时3008 ms, 在所有 Python3 提交中击败了30.50%的用户<br>内存消耗：15.5 MB, 在所有 Python3 提交中击败了72.01%的用户<br>通过测试用例：57 / 57<br>虽然这样可以做，但我们还是要秉着精益求精的原则，向大佬们讨教更优化的方法</p><h1 id="改进——哈希字典"><a href="#改进——哈希字典" class="headerlink" title="改进——哈希字典"></a>改进——哈希字典</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">nums, target</span>):</span><br><span class="line">    hashmap=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> ind,num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">        hashmap[num] = ind</span><br><span class="line">    <span class="keyword">for</span> i,num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">        j = hashmap.get(target - num)</span><br><span class="line">        <span class="keyword">if</span> j <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> i!=j:</span><br><span class="line">            <span class="keyword">return</span> [i,j]</span><br></pre></td></tr></table></figure><p>参考了大神们的解法，通过哈希来求解，这里通过字典来模拟哈希查询的过程。<br>个人理解这种办法相较于方法一其实就是字典记录了 num1 和 num2 的值和位置，而省了再查找 num2 索引的步骤。<br>这样一来，查找效率大大提升，88ms。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Computer Science" scheme="http://example.com/categories/Computer-Science/"/>
    
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>2022.4.12小记</title>
    <link href="http://example.com/2022/04/12/2022-4-12%E5%B0%8F%E8%AE%B0/"/>
    <id>http://example.com/2022/04/12/2022-4-12%E5%B0%8F%E8%AE%B0/</id>
    <published>2022-04-12T11:16:59.000Z</published>
    <updated>2022-04-12T11:27:32.714Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>如题，距离返校仅剩3天。^ _ ^  \<br>今天下午抱着一筐子书去寄了快递，想着此刻我的宿舍里应该还躺着一个尚未开封的书架\<br>给某人买的生日礼物是个大金表子，到现在都还没见上一面，甚是可惜。不过快了^ _ ^\<br>由于五月初语文期末论文的任务，这些天也在看射雕英雄传。\<br>一边看一边相见恨晚，故事情节十分引人入胜；但转念一想，又觉庆幸，不然若是让读书占据了高三，那可就得不偿失了~\<br>练习滑板也有好些天了，感觉还是小有进步。至少能原地打转了哈哈~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="闲聊" scheme="http://example.com/tags/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
  <entry>
    <title>访客须知</title>
    <link href="http://example.com/2022/04/11/%E8%AE%BF%E5%AE%A2%E9%A1%BB%E7%9F%A5/"/>
    <id>http://example.com/2022/04/11/%E8%AE%BF%E5%AE%A2%E9%A1%BB%E7%9F%A5/</id>
    <published>2022-04-11T04:30:32.000Z</published>
    <updated>2022-04-11T05:20:51.121Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="阅读此条以便快速了解Travis的小木屋"><a href="#阅读此条以便快速了解Travis的小木屋" class="headerlink" title="阅读此条以便快速了解Travis的小木屋"></a>阅读此条以便快速了解Travis的小木屋</h2><h3 id="你好！我是Travis，也是小木屋的创建者。"><a href="#你好！我是Travis，也是小木屋的创建者。" class="headerlink" title="你好！我是Travis，也是小木屋的创建者。"></a>你好！我是Travis，也是小木屋的创建者。</h3><p>*小木屋创建于2022年4月6日一个阳光明媚的下午。在过去的几天里，我对小木屋进行了一些装修。下面是一些基本介绍：<br>1.建议使用电脑浏览网站，这样你可以在左侧边栏发现一首有意思的音乐！<br>2.此网站定位为个人分享向，但你可以在评论区留言，留言必回！（评论前需用qq或微信登录）<br>3.小木屋不是靶场，希望大家共同维护一个安全舒适的小木屋！<br>4.小木屋前期装修告一段落，但如果你有什么新奇的idea可以在评论区留言！<br>5.后续将会不定期的发表一些随想、照片<br>6.差不多介绍到这儿了~<br>(u‿ฺu✿ฺ)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>希望能顺利返校……</title>
    <link href="http://example.com/2022/04/11/%E5%B8%8C%E6%9C%9B%E8%83%BD%E9%A1%BA%E5%88%A9%E8%BF%94%E6%A0%A1%E2%80%A6%E2%80%A6/"/>
    <id>http://example.com/2022/04/11/%E5%B8%8C%E6%9C%9B%E8%83%BD%E9%A1%BA%E5%88%A9%E8%BF%94%E6%A0%A1%E2%80%A6%E2%80%A6/</id>
    <published>2022-04-11T04:06:36.000Z</published>
    <updated>2022-08-19T18:21:50.990Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>从寒假至今，呆在家里已经三个月有余了。<br>每天起床第一件事就是打开手机看深圳卫健委的公众号。<br>看着每日新增一天天减少，返校的日子也一天天的盼到头了。<br>在家里闲暇时间更多了，有更多时间去做自己感兴趣的事情。<br>建立个人博客网站的念头其实在我小学的时候就有了，那时候总觉得这是一件很酷的事情。<br>实际上，网站的建立不是一朝一夕的。前期的框架搭建，后期的维护……需要付出一些精力。看着网站成长，就像看着自己栽的一棵树苗，满心欢喜。<br>在自己建的网站里随心所欲的分享心情就像在闹市里找到了一隅安静的角落。\<br>在这里，看不到五花八门的营销广告，没有繁琐无味的社交。<br>这是属于我的一片净土，我可以在这里与自己对话，也可以记录我的生活，多是一件美事儿啊！<br>期盼顺利返校！<br>\’O’/</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="木屋杂谈" scheme="http://example.com/categories/%E6%9C%A8%E5%B1%8B%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="闲聊" scheme="http://example.com/tags/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
  <entry>
    <title>formula_test</title>
    <link href="http://example.com/2022/04/11/formula-test/"/>
    <id>http://example.com/2022/04/11/formula-test/</id>
    <published>2022-04-11T03:55:40.000Z</published>
    <updated>2022-04-11T04:03:05.775Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>行间公式$O(f(n))=log_2^{n}$测试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="测试" scheme="http://example.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="数学" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到Travis的小木屋</title>
    <link href="http://example.com/2022/04/09/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0Travis%E7%9A%84%E5%B0%8F%E6%9C%A8%E5%B1%8B/"/>
    <id>http://example.com/2022/04/09/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0Travis%E7%9A%84%E5%B0%8F%E6%9C%A8%E5%B1%8B/</id>
    <published>2022-04-09T08:02:42.000Z</published>
    <updated>2022-04-11T04:08:44.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>Welcome to Travis's Hut !</center>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="木屋杂谈" scheme="http://example.com/categories/%E6%9C%A8%E5%B1%8B%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="闲聊" scheme="http://example.com/tags/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
  <entry>
    <title>Linear Algebra/线性相关性</title>
    <link href="http://example.com/2022/04/09/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E7%BA%BF%E6%80%A7%E7%9B%B8%E5%85%B3%E6%80%A7/"/>
    <id>http://example.com/2022/04/09/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E7%BA%BF%E6%80%A7%E7%9B%B8%E5%85%B3%E6%80%A7/</id>
    <published>2022-04-09T07:56:43.000Z</published>
    <updated>2022-04-11T04:01:00.461Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线性代数之线性独立性"><a href="#线性代数之线性独立性" class="headerlink" title="线性代数之线性独立性"></a>线性代数之线性独立性</h1><h1 id="以一种更加便于理解的方式叙述"><a href="#以一种更加便于理解的方式叙述" class="headerlink" title="以一种更加便于理解的方式叙述\"></a>以一种更加便于理解的方式叙述\</h1><p>假设在这样一个向量空间里，生活着一些向量。向量空间的名字是$S$，而这些向量们的名字是$u_1,u_2,…,u_n$.\<br>这些向量生活在这个空间里，就像人类生活在地球上一样，当然地球之外便是太阳系，向量空间之外便是更广阔的空间，在这里，这个更广阔的空间叫做实数域$\R^m$.\<br>这些向量有这样一种性质，我们称之为线性相关性。\<br>对于这样一个方程/线性组合（linear combination）$c_1u_1+c_2u_2+c_3u_3+…+c_nu_n=0$成立的条件。当存在一组常数$c_1,c_2,c_3,…,c_n$使其成立，并且它们<strong>不都为零</strong>时，我们就说这些向量是线性相关（linearly dependent）的；反之，当且仅当$c_1,c_2,…,c_n$全部为零才能使其成立，我们就说它们是线性无关（linearly independent）的。\<br>实际上，我们还可以从几何直观的角度去理解。例如在二维平面内，两个都不为零的共线向量，它们就存在这样一组常数$c_1,c_2$，使得$c_1u_1+c_2u_2=0$成立，这样的一组向量空间我们就说其线性相关。反之，不共线向量组成的向量空间，称之为线性无关。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Linear Algebra" scheme="http://example.com/categories/Linear-Algebra/"/>
    
    
    <category term="线性代数" scheme="http://example.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
</feed>
